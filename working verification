import random
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import discord

print("init")


class MyClient(discord.Client):

    randomCodeStringGlobal = ""
    clientEmailGlobal = "test"
    emailMessageToSendGlobal = "default"
    context = ssl.create_default_context()
    smtp_server = "smtp.gmail.com"
    port = 587  # For starttls
    sender_email = "sjstucoprojects@gmail.com"
    password = "mag1s8900"
    server = smtplib.SMTP(smtp_server, port)
    emailContentsByteFormGlobal = ""

    async def on_ready(self):
        print('Logged in as')
        print(self.user.name)
        print(self.user.id)
        print('------')

    async def on_message(self, message):
        # we do not want the bot to reply to itself
        global emailContents
        if message.author.id == self.user.id:
            return

        if message.content.startswith('!help'):
            messageTo = client.get_user_info()
            messageCont = "Here is the help menu for SJ's Discord:"
            await client.send_message(messageTo, messageCont)

        if message.content.startswith("!verify"):
            messageID = message.id
            user = client.get_user(messageID)
            print("user verify ready")
            await message.channel.send("Welcome to SJ's Discord Server!".format(
                message) + '\n' + "Please type !confirm, followed by a dash, and then the first part of your strake jesuit email, ex KPRegan20" + '\n' + "Your message should look like this: !confirm-KPRegan20")

        if message.content.startswith("!confirm"):
            # extract the first part of the email
            print("data found")
            emailStart = message.content
            emailStartStr = str(emailStart)
            emailStartStr = emailStartStr.replace("!confirm-", '')
            print(emailStartStr)

            await message.channel.send("Thanks, " + emailStartStr + ".Check your Strake Email")

            # set client email class var equal to the first part + @mail.strakejesuit.org
            self.clientEmailGlobal = emailStartStr + "@mail.strakejesuit.org"

            # create a random number for the code
            randomCodeInt = random.randrange(111111,999999)
            # set equal to class variable
            self.randomCodeStringGlobal = str(randomCodeInt)

            # call the send_email method
            await client.send_email()

        # see if the code matches the active one
        if message.content.startswith(self.randomCodeStringGlobal):
            await message.channel.send("Welcome! Your email has been verified")

    async def send_email(self):
        # debug stuff

        print("Random Code passed to send_email method" + self.randomCodeStringGlobal)

        try:
            self.server.starttls(context=self.context)  # Secure the connection
            self.server.login(self.sender_email, self.password) # login to STPM server w/ variables declared in the class
            self.server.sendmail("sjstucoprojects@gmail.com", self.clientEmailGlobal,'Subject: Discord Verification\n\n'+'Here is your code: '+ self.randomCodeStringGlobal) #send the message
        except Exception as e:
            # Print any error messages to stdout
            print("STMP Package Error:")
            print(e)
        finally:
            self.server.quit()

client = MyClient()
client.run("NjkyOTU0ODA1NTgwMDcwOTY0.Xn43dQ.aKfBS03Uskp9Ls_-YZFoz3N8XR8")

